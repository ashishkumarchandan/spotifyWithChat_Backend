import { Song } from "../models/song.model.js";

// =============================================
// üéµüéß SONG CONTROLLERS - MUSIC FETCHERS üéßüéµ
// =============================================

// üåêüé∂ GET ALL SONGS (NEWEST FIRST)
export const getAllSongs = async (req, res, next) => {
  try {
    // üîç FETCH ALL + SORT BY NEWEST
    const songs = await Song.find().sort({ createdAt: -1 }); // ‚¨áÔ∏è Descending order = newest first!
    // ‚ú® Note: Fixed variable name (song ‚Üí songs)

    // üéâ SEND FULL SONG LIST
    res.status(200).json(songs); // ‚úÖ 200 OK
  } catch (error) {
    next(error); // üö® Error handling
  }
};

// ‚≠êüé§ GET FEATURED SONGS (6 RANDOM)
export const getFeaturedSongs = async (req, res, next) => {
  try {
    // üé≤ AGGREGATION: RANDOM SAMPLE + FIELD PROJECTION
    const songs = await Song.aggregate([
      { $sample: { size: 6 } }, // üé∞ Random 6 songs
      {
        $project: {
          // ‚úÇÔ∏è TRIM FIELDS
          _id: 1, // üÜî Keep ID
          title: 1, // üè∑Ô∏è Title
          artist: 1, // üé§ Artist
          imageUrl: 1, // üñºÔ∏è Cover art
          audioUrl: 1, // üîä Audio file
        },
      },
    ]);

    // üöÄ SEND LEAN RESPONSE
    res.json(songs); // ‚úÖ 200 OK (implied)
  } catch (error) {
    next(error); // üö® Error handling
  }
};

// üßë‚Äçüé§üéß GET MADE-FOR-YOU SONGS (4 RANDOM)
export const getMadeForYouSongs = async (req, res, next) => {
  try {
    // üé≤ IDENTICAL LOGIC AS FEATURED (BUT SIZE=4)
    const songs = await Song.aggregate([
      { $sample: { size: 4 } }, // üî¢ Only 4 songs
      {
        $project: {
          // ‚úÇÔ∏è SAME FIELD SELECTION
          _id: 1,
          title: 1,
          artist: 1,
          imageUrl: 1,
          audioUrl: 1,
        },
      },
    ]);

    // üöÄ SEND CURATED SELECTION
    res.json(songs); // ‚úÖ 200 OK
  } catch (error) {
    next(error); // üö® Error handling
  }
};

// üî•üìà GET TRENDING SONGS (4 RANDOM)
export const getTrendingSongs = async (req, res, next) => {
  try {
    // ‚ö†Ô∏è CURRENTLY RANDOM - NOT ACTUAL TRENDING!
    const songs = await Song.aggregate([
      { $sample: { size: 4 } }, // üé≤ Random selection
      {
        $project: {
          // ‚úÇÔ∏è SAME FIELD SET
          _id: 1,
          title: 1,
          artist: 1,
          imageUrl: 1,
          audioUrl: 1,
        },
      },
    ]);

    // üöÄ SEND "TRENDING" SELECTION
    res.json(songs); // ‚úÖ 200 OK
  } catch (error) {
    next(error); // üö® Error handling
  }
};
